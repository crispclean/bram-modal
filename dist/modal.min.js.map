{"mappings":"0hBAEA,IAAMA,qDAAgB,4jBAuBP,WACb,SAAAC,IAAyB,IAAbC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACnB,GADuBG,oDAAAC,KAAAN,GACNI,MAAbH,EAAOM,GACT,KAAM,yBAGRD,KAAKC,GAAKN,EAAOM,GACjBD,KAAKE,UAAYT,qDACjBO,KAAKG,YAAcR,EAAOQ,YAC1BH,KAAKI,WAAaT,EAAOS,WACzBJ,KAAKK,OAASV,EAAOU,OACrBL,KAAKM,QAAUX,EAAOW,QAEtBC,SAASC,iBACP,mBACAR,KAAKS,mBAAmBC,KAAKV,iBAfpB,SAAAN,KAAA,CAAA,CAAAiB,IAAA,qBAAAC,MAAA,WAmBQ,IAAAC,EAAAb,KACnBA,KAAKc,SAAWP,SAASQ,cAAc,YAAcf,KAAKC,IAC1DD,KAAKgB,SAAWT,SAASU,iBACvB,yBAA2BjB,KAAKC,GAAK,MAEvCD,KAAKgB,SAASnB,QACZG,KAAKgB,SAASE,SAAQ,SAACC,GAAD,OACpBA,EAAQX,iBAAiB,SAAS,WAAA,OAAMK,EAAKO,oBA1BtC,CAAAT,IAAA,YAAAC,MAAA,WA+BXZ,KAAKqB,SAAWrB,KAAKsB,eAAetB,KAAKE,WAAW,GACpDF,KAAKuB,8BACLhB,SAASiB,KAAKC,OAAOzB,KAAKqB,UAC1BrB,KAAKK,QAAUL,KAAKK,OAAOL,QAlChB,CAAAW,IAAA,aAAAC,MAAA,WAsCXZ,KAAKM,SAAWN,KAAKM,QAAQN,MAC7BO,SAASiB,KAAKE,YAAYnB,SAASQ,cAAc,UAAYf,KAAKC,OAvCvD,CAAAU,IAAA,iBAAAC,MAAA,SA0CEV,GACb,IAAIyB,GAAO,IAAIC,WAAYC,gBAAgB3B,EAAW,aACtD,OAAO4B,MAAMC,KAAKJ,EAAKH,KAAKQ,cA5CjB,CAAArB,IAAA,8BAAAC,MAAA,WAiDXZ,KAAKqB,SAASpB,GAAKD,KAAKC,GACpBD,KAAKG,aACPH,KAAKqB,SAASY,UAAUC,IAAIlC,KAAKG,aAGnCI,SAAS4B,UAAYnC,KAAKoC,WAAW1B,KAAKV,MAE1C,IAAMqC,EAAUrC,KAAKqB,SAASiB,SAAS,GACvCD,EAAQ7B,iBAAiB,QAASR,KAAKoC,WAAW1B,KAAKV,OAEtCqC,EAAQC,SAAS,GACzB9B,iBAAiB,QAASR,KAAKoC,WAAW1B,KAAKV,OAEpDA,KAAKc,SACPuB,EAAQE,aACNvC,KAAKc,SAAS0B,QAAQC,WAAU,GAChCJ,EAAQC,SAAS,KAGnBD,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,iBAC5CL,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,QACvC1C,KAAKI,aACRiC,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,aAvErC,CAAA/B,IAAA,aAAAC,MAAA,SA4EF+B,GACT,GAAI,QAASA,EACG,WAAVA,EAAEhC,KAA8B,QAAVgC,EAAEhC,KAA+B,KAAdgC,EAAEC,SAC7C5C,KAAK6C,iBAEF,CACL,GAAIF,EAAEG,SAAWH,EAAEI,cAAe,OAClC/C,KAAK6C,sJAnFInD,EAAA","sources":["src/modal.js"],"names":["defaultDOMString","BramModal","params","arguments","length","undefined","$cdabb3312a4b127e714dc6dfd1f519$var$_classCallCheck","this","id","domString","customClass","hideFooter","onShow","onClose","document","addEventListener","onDomContentLoaded","bind","key","value","_this","template","querySelector","triggers","querySelectorAll","forEach","trigger","showModal","elements","parseDOMString","populateContentAndListeners","body","append","removeChild","html","DOMParser","parseFromString","Array","from","childNodes","classList","add","onkeydown","eventClose","overlay","children","replaceChild","content","cloneNode","innerHTML","e","keyCode","closeModal","target","currentTarget"],"version":3,"file":"modal.min.js.map","sourcesContent":["/** inspired on https://micromodal.now.sh/ &  https://tingle.robinparisi.com/ */\n\nconst defaultDOMString = `\n  <div class=\"modal\">\n    <div id=\"modal_overlay\" class=\"fixed top-0 left-0 right-0 bottom-0 bg-black flex justify-center items-center\">\n        <div id=\"modal_container\" class=\"container p-16 bg-white max-h-screen m-auto\">\n            <div id=\"modal_header\"></div>\n            <div id=\"modal_body\"></div>\n            <div id=\"modal_footer\"></div>\n        </div>\n        <div id=\"modal_close_btn\" class=\"fixed right-0 top-0 mr-4 mt-4 text-white cursor-pointer z-10 text-white\">&#10006;</div>\n    </div>\n  </div>`;\n\n//   onShow: modal => console.info(`${modal.id} is shown`), // [1]\n//   onClose: modal => console.info(`${modal.id} is hidden`), // [2]\n//   openTrigger: 'data-custom-open', // [3]\n//   closeTrigger: 'data-custom-close', // [4]\n//   openClass: 'is-open', // [5]\n//   disableScroll: true, // [6]\n//   disableFocus: false, // [7]\n//   awaitOpenAnimation: false, // [8]\n//   awaitCloseAnimation: false, // [9]\n//   debugMode: true // [10]\n\nconst BramModal = class {\n  constructor(params = {}) {\n    if (params.id == undefined) {\n      throw \"ID is a required field\";\n    }\n\n    this.id = params.id;\n    this.domString = defaultDOMString;\n    this.customClass = params.customClass;\n    this.hideFooter = params.hideFooter;\n    this.onShow = params.onShow;\n    this.onClose = params.onClose;\n\n    document.addEventListener(\n      \"DOMContentLoaded\",\n      this.onDomContentLoaded.bind(this)\n    );\n  }\n\n  onDomContentLoaded() {\n    this.template = document.querySelector(\"template#\" + this.id);\n    this.triggers = document.querySelectorAll(\n      '*[data-modal-trigger=\"' + this.id + '\"]'\n    );\n    this.triggers.length &&\n      this.triggers.forEach((trigger) =>\n        trigger.addEventListener(\"click\", () => this.showModal())\n      );\n  }\n\n  showModal() {\n    this.elements = this.parseDOMString(this.domString)[0];\n    this.populateContentAndListeners();\n    document.body.append(this.elements);\n    this.onShow && this.onShow(this);\n  }\n\n  closeModal() {\n    this.onClose && this.onClose(this);\n    document.body.removeChild(document.querySelector(\".modal#\" + this.id)); // https://www.tutorialspoint.com/how-can-detached-dom-elements-cause-memory-leak-in-javascript\n  }\n\n  parseDOMString(domString) {\n    let html = new DOMParser().parseFromString(domString, \"text/html\");\n    return Array.from(html.body.childNodes);\n  }\n\n  populateContentAndListeners() {\n    //root\n    this.elements.id = this.id;\n    if (this.customClass) {\n      this.elements.classList.add(this.customClass);\n    }\n\n    document.onkeydown = this.eventClose.bind(this);\n\n    const overlay = this.elements.children[0];\n    overlay.addEventListener(\"click\", this.eventClose.bind(this));\n\n    const closeBtn = overlay.children[1];\n    closeBtn.addEventListener(\"click\", this.eventClose.bind(this));\n\n    if (this.template) {\n      overlay.replaceChild(\n        this.template.content.cloneNode(true),\n        overlay.children[0]\n      );\n    } else {\n      overlay.children[0].children[0].innerHTML = \"HEADER DEFAULT\";\n      overlay.children[0].children[1].innerHTML = \"BODY \";\n      if (!this.hideFooter) {\n        overlay.children[0].children[2].innerHTML = \"FOOTER\";\n      }\n    }\n  }\n\n  eventClose(e) {\n    if (\"key\" in e) {\n      if (e.key === \"Escape\" || e.key === \"Esc\" || e.keyCode === 27) {\n        this.closeModal();\n      }\n    } else {\n      if (e.target !== e.currentTarget) return;\n      this.closeModal();\n    }\n  }\n};\n\nexport default BramModal;\n"]}