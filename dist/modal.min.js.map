{"mappings":"gBAckB,MAChBA,aAAYC,GAAEA,EAAFC,YAAMA,EAANC,OAAmBA,IAC7BC,KAAKH,GAAKA,EACVG,KAAKC,UAfiB,6gBAgBtBD,KAAKF,YAAcA,EACnBE,KAAKD,OAASA,EAEdG,SAASC,iBACP,mBACA,KACEH,KAAKI,SAAWF,SAASG,cAAc,YAAcL,KAAKH,IAC1DG,KAAKM,SAAWJ,SAASK,iBACvB,yBAA2BP,KAAKH,GAAK,MAEvCG,KAAKM,SAASE,QAASC,GACrBA,EAAQN,iBAAiB,QAAS,IAAMH,KAAKU,gBAGjD,GAIJA,YACE,IAAIC,EAAWX,KAAKY,eAAeZ,KAAKC,WACxCU,EAAWX,KAAKa,iBAAiBF,GACjCX,KAAKc,oBAAoBH,GAEzBX,KAAKe,eAGPH,eAAeX,GACb,IAAIe,GAAO,IAAIC,WAAYC,gBAAgBjB,EAAW,aACtD,OAAOkB,MAAMC,KAAKJ,EAAKK,KAAKC,YAG9BT,iBAAiBF,GAEfA,EAAS,GAAGd,GAAKG,KAAKH,GAClBG,KAAKF,aACPa,EAAS,GAAGY,UAAUC,IAAIxB,KAAKF,aAGjC,MAAM2B,EAAUd,EAAS,GAAGe,SAAS,GAerC,OAbI1B,KAAKI,SACPqB,EAAQE,aACN3B,KAAKI,SAASwB,QAAQC,WAAU,GAChCJ,EAAQC,SAAS,KAGnBD,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,SAC5CL,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,OACxC9B,KAAKD,SACP0B,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,WAIzCnB,EAGTG,oBAAoBH,GASlBT,SAASmB,KAAKU,OARK,SAAUC,GAC3B,IAAIC,EAAW/B,SAASgC,yBAIxB,OAHAF,EAAaxB,SAAQ,SAAU2B,GAC7BF,EAASG,YAAYD,EAAKN,WAAU,OAE/BI,EAASX,WAGGe,CAAW1B,GAAU,IAG5CI,eACkBb,SAASmB,KAAKhB,cAAc,kBACpCF,iBAAiB,QAAUmC,IAC7BA,EAAEC,SAAWD,EAAEE,eACnBxC,KAAKyC,eAGKvC,SAASmB,KAAKhB,cAAc,oBACpCF,iBAAiB,QAAUmC,IACzBA,EAAEC,SAAWD,EAAEE,eACnBxC,KAAKyC,eAGPvC,SAASwC,UAAaJ,KAGhB,QAFJA,EAAIA,GAAKK,OAAOC,OAGO,WAAVN,EAAEO,KAA8B,QAAVP,EAAEO,IAEV,KAAdP,EAAEQ,UAGb9C,KAAKyC,cAKXA,aACEvC,SAASmB,KAAK0B,YAAY7C,SAASG,cAAc,UAAYL,KAAKH","sources":["src/modal.js"],"names":["constructor","id","customClass","footer","this","domString","document","addEventListener","template","querySelector","triggers","querySelectorAll","forEach","trigger","showModal","elements","parseDOMString","populateElements","appendElementsToDOM","addListeners","html","DOMParser","parseFromString","Array","from","body","childNodes","classList","add","overlay","children","replaceChild","content","cloneNode","innerHTML","append","arrayOfNodes","fragment","createDocumentFragment","item","appendChild","toNodeList","e","target","currentTarget","closeModal","onkeydown","window","event","key","keyCode","removeChild"],"version":3,"file":"modal.min.js.map","sourcesContent":["/** inspired on https://micromodal.now.sh/ &  https://tingle.robinparisi.com/ */\n\nconst defaultDOMString = `\n  <div class=\"modal\">\n    <div id=\"modal_overlay\" class=\"fixed top-0 left-0 right-0 bottom-0 bg-black flex justify-center items-center\">\n        <div id=\"modal_container\" class=\"container p-16 bg-white max-h-screen m-auto\">\n            <div id=\"modal_header\"></div>\n            <div id=\"modal_body\"></div>\n            <div id=\"modal_footer\"></div>\n        </div>\n        <div id=\"modal_close_btn\" class=\"fixed right-0 top-0 mr-4 mt-4 text-white cursor-pointer z-10 text-white\">&#10006;</div>\n    </div>\n  </div>`;\n\nconst BramModal = class {\n  constructor({ id, customClass, footer }) {\n    this.id = id;\n    this.domString = defaultDOMString;\n    this.customClass = customClass;\n    this.footer = footer;\n\n    document.addEventListener(\n      \"DOMContentLoaded\",\n      () => {\n        this.template = document.querySelector(\"template#\" + this.id);\n        this.triggers = document.querySelectorAll(\n          '*[data-modal-trigger=\"' + this.id + '\"]'\n        );\n        this.triggers.forEach((trigger) =>\n          trigger.addEventListener(\"click\", () => this.showModal())\n        );\n      },\n      false\n    );\n  }\n\n  showModal() {\n    let elements = this.parseDOMString(this.domString);\n    elements = this.populateElements(elements);\n    this.appendElementsToDOM(elements);\n    //Need to add listeners here since clone does not copy event listeners - lame\n    this.addListeners();\n  }\n\n  parseDOMString(domString) {\n    let html = new DOMParser().parseFromString(domString, \"text/html\");\n    return Array.from(html.body.childNodes);\n  }\n\n  populateElements(elements) {\n    //root\n    elements[0].id = this.id;\n    if (this.customClass) {\n      elements[0].classList.add(this.customClass);\n    }\n\n    const overlay = elements[0].children[0];\n\n    if (this.template) {\n      overlay.replaceChild(\n        this.template.content.cloneNode(true),\n        overlay.children[0]\n      );\n    } else {\n      overlay.children[0].children[0].innerHTML = \"HEADER\";\n      overlay.children[0].children[1].innerHTML = \"BODY\";\n      if (this.footer) {\n        overlay.children[0].children[2].innerHTML = \"FOOTER\";\n      }\n    }\n\n    return elements;\n  }\n\n  appendElementsToDOM(elements) {\n    const toNodeList = function (arrayOfNodes) {\n      let fragment = document.createDocumentFragment();\n      arrayOfNodes.forEach(function (item) {\n        fragment.appendChild(item.cloneNode(true));\n      });\n      return fragment.childNodes;\n    };\n\n    document.body.append(toNodeList(elements)[0]);\n  }\n\n  addListeners() {\n    const overlay = document.body.querySelector(\"#modal_overlay\");\n    overlay.addEventListener(\"click\", (e) => {\n      if (e.target !== e.currentTarget) return;\n      this.closeModal();\n    });\n\n    const btn = document.body.querySelector(\"#modal_close_btn\");\n    btn.addEventListener(\"click\", (e) => {\n      if (e.target !== e.currentTarget) return;\n      this.closeModal();\n    });\n\n    document.onkeydown = (e) => {\n      e = e || window.event;\n      var isEscape = false;\n      if (\"key\" in e) {\n        isEscape = e.key === \"Escape\" || e.key === \"Esc\";\n      } else {\n        isEscape = e.keyCode === 27;\n      }\n      if (isEscape) {\n        this.closeModal();\n      }\n    };\n  }\n\n  closeModal() {\n    document.body.removeChild(document.querySelector(\".modal#\" + this.id)); // https://www.tutorialspoint.com/how-can-detached-dom-elements-cause-memory-leak-in-javascript\n  }\n};\n\nexport default BramModal;\n"]}