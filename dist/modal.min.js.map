{"mappings":"0hBAEA,IAAMA,qDAAgB,ikBAYP,WACb,SAAAC,IAAyB,IAAbC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACnB,GADuBG,oDAAAC,KAAAN,GACNI,MAAbH,EAAOM,GACT,KAAM,yBAGRD,KAAKC,GAAKN,EAAOM,GACjBD,KAAKE,UAAYT,qDACjBO,KAAKG,cAAgBR,EAAOQ,cAC5BH,KAAKI,OAAST,EAAOS,OACrBJ,KAAKK,QAAUV,EAAOU,QACtBL,KAAKM,eAAgB,EAGK,aAAxBC,SAASC,YACe,WAAxBD,SAASC,WAETD,SAASE,iBACP,mBACAT,KAAKU,mBAAmBC,KAAKX,OAG/BA,KAAKU,+BAtBI,SAAAhB,KAAA,CAAA,CAAAkB,IAAA,qBAAAC,MAAA,WA0BQ,IAAAC,EAAAd,KACnBA,KAAKe,SAAWR,SAASS,cACvB,yBAA2BhB,KAAKC,GAAK,MAEvCD,KAAKiB,SAAWV,SAASW,iBACvB,yBAA2BlB,KAAKC,GAAK,MAGvCD,KAAKiB,SAASpB,QACZG,KAAKiB,SAASE,SAAQ,SAACC,GAAD,OACpBA,EAAQX,iBAAiB,SAAS,WAAA,OAAMK,EAAKO,oBApCtC,CAAAT,IAAA,YAAAC,MAAA,WAyCPN,SAASe,eAAetB,KAAKC,MACjCD,KAAKuB,SAAWvB,KAAKwB,eAAexB,KAAKE,WAAW,GACpDF,KAAKyB,8BACLlB,SAASmB,KAAKC,OAAO3B,KAAKuB,UACtBvB,KAAKM,gBAAeC,SAASmB,KAAKE,MAAMC,SAAW,UACvD7B,KAAKI,QAAUJ,KAAKI,OAAOJ,SA9ChB,CAAAY,IAAA,aAAAC,MAAA,WAkDXb,KAAKK,SAAWL,KAAKK,QAAQL,MAC7BO,SAASmB,KAAKI,YAAYvB,SAASS,cAAc,UAAYhB,KAAKC,KAClEM,SAASmB,KAAKE,MAAMC,SAAW,KApDpB,CAAAjB,IAAA,iBAAAC,MAAA,SAuDEX,GACb,IAAI6B,GAAO,IAAIC,WAAYC,gBAAgB/B,EAAW,aACtD,OAAOgC,MAAMC,KAAKJ,EAAKL,KAAKU,cAzDjB,CAAAxB,IAAA,8BAAAC,MAAA,WA8DXb,KAAKuB,SAAStB,GAAKD,KAAKC,GACpBD,KAAKG,eACPH,KAAKuB,SAASc,UAAUC,IAAI,UAAYtC,KAAKG,eAG/CI,SAASgC,UAAYvC,KAAKwC,WAAW7B,KAAKX,MAE1C,IAAMyC,EAAUzC,KAAKuB,SAASmB,SAAS,GACvCD,EAAQhC,iBAAiB,QAAST,KAAKwC,WAAW7B,KAAKX,OAEtCyC,EAAQC,SAAS,GACzBjC,iBAAiB,QAAST,KAAKwC,WAAW7B,KAAKX,OAEpDA,KAAKe,SACP0B,EAAQE,aACN3C,KAAKe,SAAS6B,QAAQC,WAAU,GAChCJ,EAAQC,SAAS,KAGnBD,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,iBAC5CL,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,QACvC9C,KAAK+C,aACRN,EAAQC,SAAS,GAAGA,SAAS,GAAGI,UAAY,aApFrC,CAAAlC,IAAA,aAAAC,MAAA,SAyFFmC,GACT,GAAI,QAASA,EACG,WAAVA,EAAEpC,KAA8B,QAAVoC,EAAEpC,KAA+B,KAAdoC,EAAEC,SAC7CjD,KAAKkD,iBAEF,CACL,GAAIF,EAAEG,SAAWH,EAAEI,cAAe,OAClCpD,KAAKkD,sJAhGIxD,EAAA","sources":["src/modal.js"],"names":["defaultDOMString","BramModal","params","arguments","length","undefined","$cdabb3312a4b127e714dc6dfd1f519$var$_classCallCheck","this","id","domString","classModifier","onShow","onClose","disableScroll","document","readyState","addEventListener","onDomContentLoaded","bind","key","value","_this","template","querySelector","triggers","querySelectorAll","forEach","trigger","showModal","getElementById","elements","parseDOMString","populateContentAndListeners","body","append","style","overflow","removeChild","html","DOMParser","parseFromString","Array","from","childNodes","classList","add","onkeydown","eventClose","overlay","children","replaceChild","content","cloneNode","innerHTML","hideFooter","e","keyCode","closeModal","target","currentTarget"],"version":3,"file":"modal.min.js.map","sourcesContent":["/** inspired on https://micromodal.now.sh/ &  https://tingle.robinparisi.com/ */\n\nconst defaultDOMString = `\n  <div class=\"modal\">\n    <div class=\"modal__overlay fixed top-0 left-0 right-0 bottom-0 bg-black flex justify-center items-center z-50\">\n        <div class=\"modal__content container p-16 bg-white max-h-screen m-auto\">\n            <div class=\"modal__header\"></div>\n            <div class=\"modal__body\"></div>\n            <div class=\"modal__footer\"></div>\n        </div>\n        <div class=\"modal__closeButton fixed right-0 top-0 mr-4 mt-4 text-white cursor-pointer z-10 text-white\">&#10006;</div>\n    </div>\n  </div>`;\n\nconst BramModal = class {\n  constructor(params = {}) {\n    if (params.id == undefined) {\n      throw \"ID is a required field\";\n    }\n\n    this.id = params.id;\n    this.domString = defaultDOMString;\n    this.classModifier = params.classModifier;\n    this.onShow = params.onShow;\n    this.onClose = params.onClose;\n    this.disableScroll = true;\n\n    if (\n      document.readyState === \"complete\" ||\n      document.readyState === \"loaded\"\n    ) {\n      document.addEventListener(\n        \"DOMContentLoaded\",\n        this.onDomContentLoaded.bind(this)\n      );\n    } else {\n      this.onDomContentLoaded();\n    }\n  }\n\n  onDomContentLoaded() {\n    this.template = document.querySelector(\n      '*[data-modal-content=\"' + this.id + '\"]'\n    );\n    this.triggers = document.querySelectorAll(\n      '*[data-modal-trigger=\"' + this.id + '\"]'\n    );\n\n    this.triggers.length &&\n      this.triggers.forEach((trigger) =>\n        trigger.addEventListener(\"click\", () => this.showModal())\n      );\n  }\n\n  showModal() {\n    if (document.getElementById(this.id)) return;\n    this.elements = this.parseDOMString(this.domString)[0];\n    this.populateContentAndListeners();\n    document.body.append(this.elements);\n    if (this.disableScroll) document.body.style.overflow = \"hidden\";\n    this.onShow && this.onShow(this);\n  }\n\n  closeModal() {\n    this.onClose && this.onClose(this);\n    document.body.removeChild(document.querySelector(\".modal#\" + this.id)); // https://www.tutorialspoint.com/how-can-detached-dom-elements-cause-memory-leak-in-javascript\n    document.body.style.overflow = \"\";\n  }\n\n  parseDOMString(domString) {\n    let html = new DOMParser().parseFromString(domString, \"text/html\");\n    return Array.from(html.body.childNodes);\n  }\n\n  populateContentAndListeners() {\n    //root\n    this.elements.id = this.id;\n    if (this.classModifier) {\n      this.elements.classList.add(\"modal--\" + this.classModifier);\n    }\n\n    document.onkeydown = this.eventClose.bind(this);\n\n    const overlay = this.elements.children[0];\n    overlay.addEventListener(\"click\", this.eventClose.bind(this));\n\n    const closeBtn = overlay.children[1];\n    closeBtn.addEventListener(\"click\", this.eventClose.bind(this));\n\n    if (this.template) {\n      overlay.replaceChild(\n        this.template.content.cloneNode(true),\n        overlay.children[0]\n      );\n    } else {\n      overlay.children[0].children[0].innerHTML = \"HEADER DEFAULT\";\n      overlay.children[0].children[1].innerHTML = \"BODY \";\n      if (!this.hideFooter) {\n        overlay.children[0].children[2].innerHTML = \"FOOTER\";\n      }\n    }\n  }\n\n  eventClose(e) {\n    if (\"key\" in e) {\n      if (e.key === \"Escape\" || e.key === \"Esc\" || e.keyCode === 27) {\n        this.closeModal();\n      }\n    } else {\n      if (e.target !== e.currentTarget) return;\n      this.closeModal();\n    }\n  }\n};\n\nexport default BramModal;\n"]}