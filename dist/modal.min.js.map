{"mappings":"0hBAEA,IAAMA,0DAAqB,gYAQrBC,4DAAuB,4PAOd,WACb,SAAAC,IAAyB,IAAbC,EAAaC,UAAAC,OAAA,QAAAC,IAAAF,UAAA,GAAAA,UAAA,GAAJ,GACnB,GADuBG,oDAAAC,KAAAN,GACNI,MAAbH,EAAOM,GACT,KAAM,yBAGRD,KAAKC,GAAKN,EAAOM,GACjBD,KAAKE,eAAiBV,0DACtBQ,KAAKG,iBAAmBR,EAAOQ,kBAAoBV,4DACnDO,KAAKI,cAAgBT,EAAOS,cAC5BJ,KAAKK,OAASV,EAAOU,OACrBL,KAAKM,QAAUX,EAAOW,QACtBN,KAAKO,eAAgB,EAGK,aAAxBC,SAASC,YACe,gBAAxBD,SAASC,WAETT,KAAKU,qBAELF,SAASG,iBACP,mBACAX,KAAKU,mBAAmBE,KAAKZ,iBAtBtB,SAAAN,KAAA,CAAA,CAAAmB,IAAA,qBAAAC,MAAA,WA2BQ,IAAAC,EAAAf,KACnBA,KAAKgB,SAAWR,SAASS,cACvB,yBAA2BjB,KAAKC,GAAK,MAEvCD,KAAKkB,SAAWV,SAASW,iBACvB,yBAA2BnB,KAAKC,GAAK,MAGvCD,KAAKkB,SAASrB,QACZG,KAAKkB,SAASE,SAAQ,SAACC,GAAD,OACpBA,EAAQV,iBAAiB,SAAS,WAAA,OAAMI,EAAKO,oBArCtC,CAAAT,IAAA,YAAAC,MAAA,WA0CPN,SAASe,eAAevB,KAAKC,MACjCD,KAAKwB,SAAWxB,KAAKyB,eAAezB,KAAKE,gBAAgB,GACzDF,KAAK0B,8BACLlB,SAASmB,KAAKC,OAAO5B,KAAKwB,UACtBxB,KAAKO,gBAAeC,SAASmB,KAAKE,MAAMC,SAAW,UACvD9B,KAAKK,QAAUL,KAAKK,OAAOL,SA/ChB,CAAAa,IAAA,aAAAC,MAAA,WAmDXd,KAAKM,SAAWN,KAAKM,QAAQN,MAC7BQ,SAASmB,KAAKI,YAAYvB,SAASS,cAAc,UAAYjB,KAAKC,KAClEO,SAASmB,KAAKE,MAAMC,SAAW,KArDpB,CAAAjB,IAAA,iBAAAC,MAAA,SAwDEkB,GACb,IAAIC,GAAO,IAAIC,WAAYC,gBAAgBH,EAAW,aACtD,OAAOI,MAAMC,KAAKJ,EAAKN,KAAKW,cA1DjB,CAAAzB,IAAA,8BAAAC,MAAA,WA+DXd,KAAKwB,SAASvB,GAAKD,KAAKC,GACpBD,KAAKI,eACPJ,KAAKwB,SAASe,UAAUC,IAAI,UAAYxC,KAAKI,eAG/CI,SAASiC,UAAYzC,KAAK0C,WAAW9B,KAAKZ,MAE1C,IAAM2C,EAAU3C,KAAKwB,SAASoB,SAAS,GACvCD,EAAQhC,iBAAiB,QAASX,KAAK0C,WAAW9B,KAAKZ,OAEtC2C,EAAQC,SAAS,GACzBjC,iBAAiB,QAASX,KAAK0C,WAAW9B,KAAKZ,OAExD,IAAM6C,EAAUF,EAAQC,SAAS,GAE7B5C,KAAKgB,SACP6B,EAAQjB,OAAO5B,KAAKgB,SAAS6B,QAAQC,WAAU,IAE/CD,EAAQE,UAAY/C,KAAKG,mBAjFhB,CAAAU,IAAA,aAAAC,MAAA,SAqFFkC,GACT,GAAI,QAASA,EACG,WAAVA,EAAEnC,KAA8B,QAAVmC,EAAEnC,KAA+B,KAAdmC,EAAEC,SAC7CjD,KAAKkD,iBAEF,CACL,GAAIF,EAAEG,SAAWH,EAAEI,cAAe,OAClCpD,KAAKkD,sJA5FIxD,EAAA","sources":["src/modal.js"],"names":["defaultModalDomString","defaultContentDomString","BramModal","params","arguments","length","undefined","$cdabb3312a4b127e714dc6dfd1f519$var$_classCallCheck","this","id","modalDomString","contentDomString","classModifier","onShow","onClose","disableScroll","document","readyState","onDomContentLoaded","addEventListener","bind","key","value","_this","template","querySelector","triggers","querySelectorAll","forEach","trigger","showModal","getElementById","elements","parseDOMString","populateContentAndListeners","body","append","style","overflow","removeChild","domString","html","DOMParser","parseFromString","Array","from","childNodes","classList","add","onkeydown","eventClose","overlay","children","content","cloneNode","innerHTML","e","keyCode","closeModal","target","currentTarget"],"version":3,"file":"modal.min.js.map","sourcesContent":["/** inspired on https://micromodal.now.sh/ &  https://tingle.robinparisi.com/ */\n\nconst defaultModalDomString = `\n  <div class=\"modal\">\n    <div class=\"modal__overlay fixed top-0 left-0 right-0 bottom-0 bg-black flex justify-center items-center z-50\">\n        <div class=\"modal__content w-full h-full flex justify-center items-center\"></div>\n        <div class=\"modal__closeButton fixed right-0 top-0 mr-4 mt-4 text-white cursor-pointer z-10 text-white\">&#10006;</div>\n    </div>\n  </div>`;\n\nconst defaultContentDomString = `\n  <div class=\"container p-16 bg-white max-h-screen m-auto\">\n    <div class=\"modal__header\">HEADER</div>\n    <div class=\"modal__body\">BODY</div>\n    <div class=\"modal__footer\">FOOTER</div>\n  </div>`;\n\nconst BramModal = class {\n  constructor(params = {}) {\n    if (params.id == undefined) {\n      throw \"ID is a required field\";\n    }\n\n    this.id = params.id;\n    this.modalDomString = defaultModalDomString;\n    this.contentDomString = params.contentDomString || defaultContentDomString;\n    this.classModifier = params.classModifier;\n    this.onShow = params.onShow;\n    this.onClose = params.onClose;\n    this.disableScroll = true;\n\n    if (\n      document.readyState === \"complete\" ||\n      document.readyState === \"interactive\"\n    ) {\n      this.onDomContentLoaded();\n    } else {\n      document.addEventListener(\n        \"DOMContentLoaded\",\n        this.onDomContentLoaded.bind(this)\n      );\n    }\n  }\n\n  onDomContentLoaded() {\n    this.template = document.querySelector(\n      '*[data-modal-content=\"' + this.id + '\"]'\n    );\n    this.triggers = document.querySelectorAll(\n      '*[data-modal-trigger=\"' + this.id + '\"]'\n    );\n\n    this.triggers.length &&\n      this.triggers.forEach((trigger) =>\n        trigger.addEventListener(\"click\", () => this.showModal())\n      );\n  }\n\n  showModal() {\n    if (document.getElementById(this.id)) return;\n    this.elements = this.parseDOMString(this.modalDomString)[0];\n    this.populateContentAndListeners();\n    document.body.append(this.elements);\n    if (this.disableScroll) document.body.style.overflow = \"hidden\";\n    this.onShow && this.onShow(this);\n  }\n\n  closeModal() {\n    this.onClose && this.onClose(this);\n    document.body.removeChild(document.querySelector(\".modal#\" + this.id)); // https://www.tutorialspoint.com/how-can-detached-dom-elements-cause-memory-leak-in-javascript\n    document.body.style.overflow = \"\";\n  }\n\n  parseDOMString(domString) {\n    let html = new DOMParser().parseFromString(domString, \"text/html\");\n    return Array.from(html.body.childNodes);\n  }\n\n  populateContentAndListeners() {\n    //root\n    this.elements.id = this.id;\n    if (this.classModifier) {\n      this.elements.classList.add(\"modal--\" + this.classModifier);\n    }\n\n    document.onkeydown = this.eventClose.bind(this);\n\n    const overlay = this.elements.children[0];\n    overlay.addEventListener(\"click\", this.eventClose.bind(this));\n\n    const closeBtn = overlay.children[1];\n    closeBtn.addEventListener(\"click\", this.eventClose.bind(this));\n\n    const content = overlay.children[0];\n\n    if (this.template) {\n      content.append(this.template.content.cloneNode(true));\n    } else {\n      content.innerHTML = this.contentDomString;\n    }\n  }\n\n  eventClose(e) {\n    if (\"key\" in e) {\n      if (e.key === \"Escape\" || e.key === \"Esc\" || e.keyCode === 27) {\n        this.closeModal();\n      }\n    } else {\n      if (e.target !== e.currentTarget) return;\n      this.closeModal();\n    }\n  }\n};\n\nexport default BramModal;\n"]}